name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Run tests (if available)
      run: npm test || echo "No tests found"

    - name: Package Extension
      run: npm run package

    - name: Install semantic-release
      run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git

    - name: Generate commit message based on branch/PR
      id: commit_type
      run: |
        # Get the latest commit message (the merge commit)
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        echo "Original commit: $COMMIT_MSG"

        # Extract branch name from merge commit if it exists
        if [[ $COMMIT_MSG =~ Merge\ pull\ request.*from.*/(.*) ]]; then
          BRANCH_NAME="${BASH_REMATCH[1]}"
          echo "Branch name: $BRANCH_NAME"

          # Determine commit type based on branch prefix
          if [[ $BRANCH_NAME =~ ^feature/.* ]] || [[ $BRANCH_NAME =~ ^feat/.* ]]; then
            COMMIT_TYPE="feat"
          elif [[ $BRANCH_NAME =~ ^fix/.* ]] || [[ $BRANCH_NAME =~ ^bugfix/.* ]] || [[ $BRANCH_NAME =~ ^hotfix/.* ]]; then
            COMMIT_TYPE="fix"
          elif [[ $BRANCH_NAME =~ ^docs/.* ]]; then
            COMMIT_TYPE="docs"
          elif [[ $BRANCH_NAME =~ ^refactor/.* ]]; then
            COMMIT_TYPE="refactor"
          elif [[ $BRANCH_NAME =~ ^test/.* ]]; then
            COMMIT_TYPE="test"
          elif [[ $BRANCH_NAME =~ ^chore/.* ]]; then
            COMMIT_TYPE="chore"
          else
            # Default to patch for any other changes
            COMMIT_TYPE="fix"
          fi

          # Create new conventional commit message
          NEW_COMMIT_MSG="$COMMIT_TYPE: ${COMMIT_MSG#*\#*}"
          NEW_COMMIT_MSG="${NEW_COMMIT_MSG% (*}"  # Remove PR number if present

          echo "New commit message: $NEW_COMMIT_MSG"

          # Amend the last commit with conventional format
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit --amend -m "$NEW_COMMIT_MSG"
        fi

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release