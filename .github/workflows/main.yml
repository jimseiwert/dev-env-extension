name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for current version)'
        required: false
        default: ''

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # Always run CI - for both PRs and main branch
  ci:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Run tests (if available)
      run: npm test || echo "No tests found"

    - name: Package Extension
      run: npm run package

    - name: Upload VSIX as artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-vsix-ci
        path: '*.vsix'

    - name: Check if should release
      id: check
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
        fi

  # Only run on main branch - create semantic release
  release:
    runs-on: ubuntu-latest
    needs: ci
    if: needs.ci.outputs.should-release == 'true'
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Package Extension
      run: npm run package

    - name: Install semantic-release
      run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git conventional-changelog-conventionalcommits

    - name: Generate commit message based on branch/PR
      id: commit_type
      run: |
        # Get the latest commit message (the merge commit)
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        echo "Original commit: $COMMIT_MSG"

        # Extract branch name from merge commit if it exists
        if [[ $COMMIT_MSG =~ Merge\ pull\ request.*from.*/(.*) ]]; then
          BRANCH_NAME="${BASH_REMATCH[1]}"
          echo "Branch name: $BRANCH_NAME"

          # Determine commit type based on branch prefix
          if [[ $BRANCH_NAME =~ ^feature/.* ]] || [[ $BRANCH_NAME =~ ^feat/.* ]]; then
            COMMIT_TYPE="feat"
          elif [[ $BRANCH_NAME =~ ^fix/.* ]] || [[ $BRANCH_NAME =~ ^bugfix/.* ]] || [[ $BRANCH_NAME =~ ^hotfix/.* ]]; then
            COMMIT_TYPE="fix"
          elif [[ $BRANCH_NAME =~ ^docs/.* ]]; then
            COMMIT_TYPE="docs"
          elif [[ $BRANCH_NAME =~ ^refactor/.* ]]; then
            COMMIT_TYPE="refactor"
          elif [[ $BRANCH_NAME =~ ^test/.* ]]; then
            COMMIT_TYPE="test"
          elif [[ $BRANCH_NAME =~ ^chore/.* ]]; then
            COMMIT_TYPE="chore"
          else
            # Default to patch for any other changes
            COMMIT_TYPE="fix"
          fi

          # Create new conventional commit message
          NEW_COMMIT_MSG="$COMMIT_TYPE: ${COMMIT_MSG#*\#*}"
          NEW_COMMIT_MSG="${NEW_COMMIT_MSG% (*}"  # Remove PR number if present

          echo "New commit message: $NEW_COMMIT_MSG"

          # Amend the last commit with conventional format
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit --amend -m "$NEW_COMMIT_MSG"
        fi

    - name: Release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release

  # Publish to Microsoft Marketplace - only runs if new release was created
  publish-marketplace:
    runs-on: ubuntu-latest
    needs: [ci, release]
    if: needs.release.outputs.new-release-published == 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Extract version
      id: version
      run: |
        VERSION="${{ needs.release.outputs.new-release-version }}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Update package.json version
      run: npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version

    - name: Package Extension
      run: npm run package

    - name: Publish to VS Code Marketplace
      run: npm run publish
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}

    - name: Upload VSIX as artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-vsix-marketplace
        path: '*.vsix'

  # Publish to OpenVSX Registry - only runs if new release was created
  publish-openvsx:
    runs-on: ubuntu-latest
    needs: [ci, release]
    if: needs.release.outputs.new-release-published == 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Extract version
      id: version
      run: |
        VERSION="${{ needs.release.outputs.new-release-version }}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Update package.json version
      run: npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version

    - name: Package Extension
      run: npm run package

    - name: Install Open VSX CLI
      run: npm install -g ovsx

    - name: Publish to Open VSX Registry
      run: ovsx publish *.vsix
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}

    - name: Upload VSIX as artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-vsix-openvsx
        path: '*.vsix'

  # Manual publishing support - for workflow_dispatch events
  publish-manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npm run compile

    - name: Extract version for manual publish
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(node -p "require('./package.json').version")
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Update package.json version
      run: npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version

    - name: Package Extension
      run: npm run package

    - name: Publish to VS Code Marketplace
      run: npm run publish
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}

    - name: Install Open VSX CLI
      run: npm install -g ovsx

    - name: Publish to Open VSX Registry
      run: ovsx publish *.vsix
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}

    - name: Upload VSIX as artifact
      uses: actions/upload-artifact@v4
      with:
        name: extension-vsix-manual
        path: '*.vsix'